Motorola DSP56000 Macro Cross Assembler  Version 2.01  89-02-13  11:20:35  goertzel.asm  Page 1







1      

2                                  section goertzel

3                                                  opt     mu,cc,mex,nomd

4                                                  include 'StdDefs'

716                                                xdef    goe_it

717    

718                                      ;***********************************************************************************************

719                                      ;

720                                      ; Perform one iteration of Goertzel algorithm for four channels

721                                      ;

722                                      ;***********************************************************************************************

723    

724       P:0000 0D0000  [4 -        4]  goe_it    jsr     <win_calc                         ; calculate    windowing function

725       P:0001 698000  [2 -        6]            move                          y:<n_samps,r1 ; read number of samples since start

726       P:0002 300000  [2 -        8]            move              #<ch1_mem,r0            ; set up data pointer for channel 1

727       P:0003 44F000  [4 -       12]            move              x:DTMF_IN,x0            ; read channel 1 data from RX reg. 

                 000000

728       P:0005 205900  [2 -       14]            move              (r1)+                   ;increment count

729       P:0006 690000  [2 -       16]            move                          r1,y:<n_samps ; store new count

730       P:0007 0D0000  [4 -       20]            jsr     <goertzel                         ; process channel 1

731       P:0008 300000  [2 -       22]            move              #<ch2_mem,r0            ; set up data pointer for channel 2

732       P:0009 44F000  [4 -       26]            move              x:DTMF_IN+1,x0          ; read channel 2 data from RX reg.

                 000000

733       P:000B 0D0000  [4 -       30]            jsr     <goertzel                         ; process channel 2

734       P:000C 300000  [2 -       32]            move              #<ch3_mem,r0            ; set up data pointer for channel 3

735       P:000D 44F000  [4 -       36]            move              x:DTMF_IN+2,x0          ; read channel 3 data from RX reg.

                 000000

736       P:000F 0D0000  [4 -       40]            jsr     <goertzel                         ; process channel 3

737       P:0010 300000  [2 -       42]            move              #<ch4_mem,r0            ; set up data pointer for channel 4

738       P:0011 44F000  [4 -       46]            move              X:DTMF_IN+3,x0          ; read channel 4 data from RX reg.

                 000000

739       P:0013 0D0000  [4 -       50]            jsr     <goertzel                         ; process channel 4

740       P:0014 300000  [2 -       52]            move              #<ch5_mem,r0            ; set up data pointer for channel 5

741       P:0015 44F000  [4 -       56]            move              X:DTMF_IN+4,x0          ; read channel 5 data from RX reg.

                 000000

742       P:0017 0D0000  [4 -       60]            jsr     <goertzel                         ; process channel 5

743       P:0018 300000  [2 -       62]            move              #<ch6_mem,r0            ; set up data pointer for channel 6

744       P:0019 44F000  [4 -       66]            move              X:DTMF_IN+5,x0          ; read channel 6 data from RX reg.

                 000000

745       P:001B 0D0000  [4 -       70]            jsr     <goertzel                         ; process channel 6

746       P:001C 00000C  [4 -       74]            rts

747    

748    

749                                      ;*********************************************************************************************

750                                      ; Power calculation for dial tone detector

751                                      ; 

752                                      ; Calling Setup :

753                                      ;

754                                      ;              x0            :             contains log input data

Motorola DSP56000 Macro Cross Assembler  Version 2.01  89-02-13  11:20:35  goertzel.asm  Page 2







755                                      ;              r0            :             contains address of data tables for channel

756                                      ;

757                                      ; Perform one iteration of Goertzel algorithm on channel whose rows and columns are at

758                                      ; the addresses from (r0) (columns).  Input sample in x0.

759                                      ;

760                                      ; memory storage        :      y(n-1) in x:(r0), y(n-2) in y:(r0)

761                                      ;                                   Ck in y:(r5)

762                                      ;

763                                      ;***********************************************************************************************

764    

765       P:001D 468000  [2 -       76]  goertzel  move              x:<cshift,y0

766       P:001E 4580D0  [2 -       78]            mpy     x0,y0,a   x:<cmask,x1

767       P:001F 698066  [2 -       80]            and     x1,a                  y:<tab_val,r1

768       P:0020 219900  [2 -       82]            move              a1,n1

769       P:0021 057FA1  [2 -       84]            move              #<tab1,m1

770       P:0022 4C8057  [2 -       86]            cmpm    y0,a                  y:<win_val,x0 ; check sign to see about invert

771       P:0023 46E900  [4 -       90]            move              x:(r1+n1),y0            ; read value

772       P:0024 0E1000  [4 -       94]            jge     <_end_s                           ; do we need to invert? if so...

773       P:0025 3500D4  [2 -       96]            mpy     -x0,y0,a  #<coeffL1,r5            ; apply negative windowing function

774       P:0026 0C0000  [4 -      100]            jmp     <_endp                            ; and exit window stage

775       P:0027 3500D0  [2 -      102]  _end_s    mpy     x0,y0,a   #<coeffL1,r5            ; apply positive windowing function

776    

777       P:0028 21CF00  [2 -      104]  _endp     move              a,b                     ; save result of conversion

778       P:0029 45F400  [4 -      108]            move              #0.5,x1

                 400000

779       P:002B 0008F8  [2 -      110]            or      #8,mr                             ; enable scaling       

780    

781       P:002C 060880  [6 -      116]            do      #n_dtmf,_e_goert                  ; repeat for all n row/column tones

                 000031

782       P:002E 4EE001  [2 -      118]            tfr     b,a                   y:(r0),y0   ; fetch x(n) and y(n-2)

783       P:002F F0A0E6  [2 -      120]            mac     -x1,y0,a  x:(r0),x0   y:(r5)+,y0  ; form x(n)-y(n-2), fetch y(n-1) and Ck

784       P:0030 4C60D3  [2 -      122]            macr    x0,y0,a               x0,y:(r0)   ; form x(n)+b1*y(n-1)-2*y(n-2), save y(n-1)

785       P:0031 565800  [2 -      124]            move              a,x:(r0)+               ; save y(n)

786       P:0032 00F7B8  [2 -      126]  _e_goert  and     #$f7,mr                           ; disable scaling

787       P:0033 00000C  [4 -      130]            rts

788    

789    

790                                      ;*********************************************************************************************

791                                      ; Generate a data smoothing window coefficient - in this case, Hanning

792                                      ;

793                                      ; Result in y:win_val

794                                      ;

795                                      ; Should only be called when a window is definitely wanted.

796                                      ; Will clear "req_win" on exit, preventing further calls

797                                      ; unless explicitly requested.

798                                      ;

799                                      ; This generates the smoothing window used for all channels.

800                                      ;***********************************************************************************************

801    

Motorola DSP56000 Macro Cross Assembler  Version 2.01  89-02-13  11:20:35  goertzel.asm  Page 3







802       P:0034 4C8013  [2 -      132]  win_calc  clr     a                     y:<n_samps,x0 ; read position in window

803       P:0035 4D8000  [2 -      134]            move                          y:<win_scal,x1 ; read scale factor

804       P:0036 45F4A0  [4 -      138]            mpy     x1,x0,a   #$100,x1                ; scale window data, get number of points in table

                 000100

805    

806       P:0038 46F432  [4 -      142]            asl     a         #>$40,y0                ; start offset into table

                 000040

807       P:003A 46F450  [4 -      146]            add     y0,a      #>$ff,y0                ; add to form access offset

                 0000FF

808       P:003C 200056  [2 -      148]            and     y0,a                              ; limit to 8 bits

809       P:003D 200060  [2 -      150]            add     x1,a                              ; add table start address

810       P:003E 21D100  [2 -      152]            move              a,r1                    ; and use for access

811       P:003F 57F400  [4 -      156]            move              #0.5,b                  ; scale factor

                 400000

812       P:0041 5EE900  [4 -      160]            move                          y:(r1+n1),a ; read table entry

813       P:0042 200022  [2 -      162]            asr     a                                 ; divide by 2

814       P:0043 20001C  [2 -      164]            sub     a,b                               ; window function coefficient calculated

815       P:0044 1CF000  [4 -      168]            move              b,x1        y:fiddle,y0 ; shift into y0....

                 000000

816       P:0046 2000E0  [2 -      170]            mpy     x1,y0,a                           ; and scale coefficient

817       P:0047 5E0000  [2 -      172]            move                          a,y:<win_val

818       P:0048 00000C  [4 -      176]            rts

819    

820                                                endsec

821    

0    Errors

0    Warnings













































Motorola DSP56000 Macro Cross Assembler  Version 2.01  89-02-13  11:20:35  goertzel.asm  Page 4







                         Memory Utilization Report





X Memory



Start    End     Length    Type      Label             Section           Overlay Address

0000     FFFF    65536     UNUSED





Y Memory



Start    End     Length    Type      Label             Section           Overlay Address

0000     FFFF    65536     UNUSED





L Memory



Start    End     Length    Type      Label             Section           Overlay Address

0000     FFFF    65536     UNUSED





P Memory



Start    End     Length    Type      Label             Section           Overlay Address

0000     0048       73     CODE      goe_it            goertzel

0049     FFFF    65463     UNUSED















































